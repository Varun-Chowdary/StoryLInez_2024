import cv2
from PIL import Image
import os
import json
import requests
from PIL import Image
from bs4 import BeautifulSoup

"""
Image Editing:
-save image in different formats: .jpeg, .json
-cropping (entire image, one part of the image), flipping
-opacity
-insert text
-adding image
-add resize
-add automatic func to take json file info, and make a photo with text and new image overlayed on it


*overlay (just put base image in a background on top)
*5 diff templates/layouts
*product title, org. name, product name, product description
"""

#save image in diff formats
def convert_image_format(input_image_path, output_image_path, output_format):
    try:
        # Open the image file
        img = Image.open(input_image_path)
        
        # Save it in the desired format
        img.save(output_image_path, format=output_format)
        
        print(f"Image saved successfully as {output_image_path} in {output_format} format.")
    except IOError:
        print(f"Unable to save image as {output_image_path} in {output_format} format.")
"""
    JPEG: 'JPEG' or 'JPG'
    PNG: 'PNG'
    BMP: 'BMP'
    GIF: 'GIF'
    TIFF: 'TIFF' or 'TIF'
    WebP: 'WebP'
    ICO: 'ICO'
    PPM/PGM/PBM: 'PPM', 'PGM', 'PBM'
    PDF: 'PDF'
    EPS: 'EPS'
"""
#Crop the base image
def crop_image(img, x, y, width, height, display):
    #x, y = pos on img, width/height tells how the crop should go
    cropped_img = img[y:y+height, x:x+width]
    # Display the original and cropped images (optional)
    if display:
        cv2.imshow('Cropped Image', cropped_img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        
    return cropped_img
#flip the image
def flip_img(flipped_img, direction, display):
    #0 means around x axis, 1 means y axis
    flipped_img = cv2.flip(flipped_img, direction)
    if display:
        cv2.imshow('Flipped Image', flipped_img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    return flipped_img
#insert text
def add_text(image_path, text, x, y, display):
    font = cv2.FONT_HERSHEY_SIMPLEX
    height = 500
    coord_tuple = (x, y)
    text_img = cv2.putText(image_path, text, coord_tuple, font, 4, [0,0,0], 5, cv2.LINE_AA)
    if display:
        cv2.imshow('Image with text', text_img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    return text_img
#adding an image
def add_image_overlay(background, overlay, x, y, display):
    x_offset = y_offset = 50
    background[y:y+overlay.shape[0], x:x+overlay.shape[1]] = overlay

    if display:
        cv2.imshow('Result Image', background)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    return background

def resize(image, width, height, display):
    resized_image = cv2.resize(image, (width, height))
    if display:
        cv2.imshow('Result Image', resized_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    return resized_image
        
"""
# Example usage:
background_image_path = 'assets/image_3.jpg'  # Replace with your background image path
overlay_image_path = 'assets/image_5.jpg'  # Replace with your overlay image path
x, y = 100, 50  # Position where overlay image will be placed
"""
"""
return a tuple of the widht and height of an image
"""
def get_dimensions(image):
    height, width, _ = image.shape
    print(f"Width: {width} pixels")
    print(f"Height: {height} pixels")
    return [width, height]
"""
user interface to pick image editing opitions
"""
def menu():
    image_path = input("First type out the image path ")
    bool_display = input("do you want to display the image: True or False ")
    display = True
    img_object = None
    if bool_display == "True":
        display = True
    else:
        display = False
    if os.path.isfile(image_path):
        img_object = cv2.imread(image_path)
        print("1. Convert")
        print("2. Crop Image")
        print("3. Flip Image")
        print("4. Add text")
        print("5. Add image overlay")
        print("6. Dimensions of Image")
        print("7. Resize Image")
        choice = input("Enter the number of your choice ")
        if choice == '1':# Convert
            print("You chose Option 1")
            save_type = input("what type do you want to save it as ")
            output_path = input("what do you want to call it ")
            convert_image_format(img_object, output_path, save_type)
        elif choice == '2':# Crop
            print("You chose Option 2")
            x = int(input("x coord "))
            y = int(input("y coord "))
            height = int(input("hieght of crop "))
            width = int(input("width of crop "))
            crop_image(img_object, x, y, width, height, display)
        #x, y, width, height = 100, 50, 300, 200 
        elif choice == '3':# Flip
            print("You chose Option 3")
            direction = int(input("0 for x axis, 1 for y axis "))
            flip_img(img_object, direction, display)
        elif choice == '4':# Text
            print("You chose Option 4")
            text = input("what text do you want it to say ")
            x = int(input("x coord "))
            y = int(input("y coord "))
            add_text(img_object, text, x, y, display)
        elif choice == '5':# Overlay
            print("You chose Option 5")
            overlay_image_path = input("overlay image ")
            overlay_img_object = cv2.read(overlay_image_path)
            x = int(input("x coord "))
            y = int(input("y coord "))
            result_image = add_image_overlay(img_object, overlay_img_object, x, y, display)
        elif choice == '6':# Dimensions
            print("You chose opition 6")
            get_dimensions(img_object)
        elif choice == '7': # Resize
            print("You chose opition 7")
            x = int(input("new width "))
            y = int(input("new height "))
            resize(img_object, x, y, display)
        elif choice == '0':
            print("Exiting...")
            return
        else:
            print("Invalid choice. Please enter a number from 1 to 5 or 0 to exit.")
    else:
        print(f"The image file {image_path} does not exist.")
    
    
"""
1. resize image
2. add background image
3. add text overlay

"""
def automatic(resize_x, resize_y, text_x, text_y, text, background):
    url = extract_json("test_json.json")
    download_image(url, "test_img.jpg")
  #  img_path = 'assets/image_3.jpg'
    img_path = cv2.imread("test_img.jpg")
    #resize the image
    new_img = resize(img_path, resize_x, resize_y, False)
    #add text to the image
    new_img = add_text(new_img, text, text_x, text_y, False)
    #display image to screen
    cv2.imshow('Result Image', new_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def extract_json(json_file):
    url = ""
    try:
        with open(json_file, 'r') as f:
            data = json.load(f)
            url = data.get('thumbnail', {}).get('url', None)
            return url
    except FileNotFoundError:
        print(f"Error: The file '{json_file}' was not found.")
        return None
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON in file '{json_file}': {e}")
        return None


def download_image(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            file.write(response.content)



if __name__ == "__main__":
    #menu()
    automatic()
    #download_image("https://document-export.canva.com/h_G3c/DAGLtZh_G3c/2/thumbnail/0001.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAQYCGKMUHWDTJW6UD%2F20240724%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240724T150242Z&X-Amz-Expires=26158&X-Amz-Signature=59743c31deaecb37f17c7fdff8e1d22db4f6fe062ada3761fa844916cb9b36a5&X-Amz-SignedHeaders=host&response-expires=Wed%2C%2024%20Jul%202024%2022%3A18%3A40%20GMT"
    #, "test_img_.jpg")

"""
get json file
extract url of image
make automated def to put text on image
and overlay image onto background
"""
